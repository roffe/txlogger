func createImageWH(width, height int, xData, yData []uint16, data []uint8) *image.RGBA {
	//width := len(xData) * cellWidth
	//height := len(yData) * cellHeight

	// Create a new RGBA image
	img := image.NewRGBA(image.Rect(0, 0, width, height))

	// Calculate the colors for each cell based on data
	for y := 0; y < len(yData); y++ {
		for x := 0; x < len(xData); x++ {
			cellX := x * cellWidth
			cellY := (len(yData) - 1 - y) * cellHeight
			if cellY >= 0 && cellY+cellHeight <= height && cellX >= 0 && cellX+cellWidth <= width {
				index := y*len(xData) + x
				value := data[index]
				progress := float32(value) / float32(150)
				r := uint8(float32(255) * progress)
				g := uint8(float32(250) * (1 - abs(progress-0.5)*2))
				b := uint8(float32(25) * progress)
				a := uint8(float32(255) * progress)
				draw.Draw(img, image.Rect(cellX, cellY, cellX+cellWidth, cellY+cellHeight), &image.Uniform{color.RGBA{r, g, b, a}}, image.Point{cellX, cellY}, draw.Over)
			}
		}
	}
	return img
}

func createImage2(xData, yData []uint16, data []uint8) *image.RGBA {
	width := len(xData) * cellWidth
	height := len(yData) * cellHeight

	// Create a new RGBA image
	img := image.NewRGBA(image.Rect(0, 0, width, height))

	for y := 0; y < height; y++ {
		for x := 0; x < width; x++ {
			cellX := x * len(xData) / width
			cellY := (len(yData) - 1) - (y * len(yData) / height)

			if cellY >= 0 && cellY < len(yData) && cellX >= 0 && cellX < len(xData) {
				index := cellY*len(xData) + cellX
				value := data[index]
				progress := float32(value) / float32(150)
				// Set the RGBA values, with the alpha channel controlled by the progress
				img.SetRGBA(x, y, color.RGBA{
					R: uint8(float32(250) * progress),
					G: uint8(float32(250) * (1 - abs(progress-0.5)*2)),
					B: uint8(float32(25) * progress),
					A: uint8(float32(255) * progress), // Alpha channel based on progress
				})
			} else {
				// Set a transparent pixel for cells outside the provided data
				img.SetRGBA(x, y, color.RGBA{0, 0, 0, 0})
			}
		}
	}
	return img
}

func drawGrid(img draw.Image, numColumns, numRows int) {
	bounds := img.Bounds()
	cellWidth := bounds.Dx() / numColumns
	cellHeight := bounds.Dy() / numRows
	shape := image.NewUniform(color.Black)
	// Draw grid lines for rows
	for i := 1; i < numRows; i++ {
		y := i * cellHeight
		draw.Draw(img, image.Rect(0, y-1, img.Bounds().Dx(), y), shape, image.Point{}, draw.Over)
	}
	// Draw grid lines for columns
	for j := 1; j < numColumns; j++ {
		x := j * cellWidth
		draw.Draw(img, image.Rect(x-1, 0, x, img.Bounds().Dy()), shape, image.Point{}, draw.Over)
	}
}